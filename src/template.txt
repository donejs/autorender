define(<%= imports %>, function(<%= args %>){

	var tokens = <%= intermediate %>;

	var supportsCreatingScripts = (function(){
		try { document.createElement("script").appendChild(document.createDocumentFragment()); return true; } catch(_) { return false; }
	})();

	// For IE8 strip out the scripts because they will be executed prematurely.
	if(!supportsCreatingScripts) {
		var removeTag = function(tag){
			var i = 0, item;
			while(i < tokens.length) {
				item = tokens[i], j = i;
				if(item.tokenType === "start" && item.args && item.args[0] === tag) {
					do {
						item = tokens[j]; j++;
					}
					while(j < tokens.length && !(item.tokenType === "close" && item.args && item.args[0] === tag ));
					tokens.splice(i, j - i);
				}
				i++;
			}
		};
		removeTag("script");
	}

	var renderer = stache(tokens);

	var isNode = typeof process === "object" && {}.toString.call(process) === "[object process]";

	if(!isNode) {
		// SSR helpers isProduction, and some that don't matter in the client.
		stache.registerHelper("isProduction", function(options){
			var loader = typeof System !== "undefined" ? System : undefined;
			if(loader && loader.isEnv && loader.isEnv("production")) {
				return options.fn(this);
			} else {
				return options.inverse(this);
			}
		});
		stache.registerHelper("asset", can.k);
	}

	var __export = {
		renderToFrag: function(scope, options){
			var moduleOptions = { module: module };
			options = (options && options.add) ? options.add(moduleOptions) :
				moduleOptions;
			return renderer(scope, options);
		},
		start: function(){
			var state = this.state = new this.viewModel;
			if (can.route) {
				can.route.map(state);
				can.route.ready();
			}
			this.rerender();
		},
		rerender: function(){
			var keep = { "SCRIPT": true, "STYLE": true, "LINK": true };
			function eachChild(parent, callback){
				can.each(can.makeArray(parent.childNodes), function(el){
					if(!keep[el.nodeName]) {
						callback(el);
					}
				});
			}

			function remove(el) {
				can.remove(can.$(el));
			}

			function appendTo(parent){
				return function(el){
					can.appendChild(parent, el);
				}
			}

			this.renderAsync().then(function(result){
				var frag = result.fragment;
				var head = document.head || document.getElementsByTagName("head")[0];
				var body = document.body;

				// Move elements from the fragment's head to the document head.
				eachChild(head, remove);
				eachChild(can.$("head", frag)[0], appendTo(head));

				// Move elements from the fragment's body to the document body.
				eachChild(body, remove);
				eachChild(can.$("body", frag)[0], appendTo(body));
			});
		},
		renderAsync: function(renderer, data, options, doc){
			renderer = renderer || this.renderToFrag;
			data = data || this.state;
			options = options || {};

			var frag;
			return wait(function(){
				frag = renderer(data, options);

				if(doc) {
					var oldDoc = can.document;
					can.document = doc;
					can.appendChild(doc.body, frag, doc);
					can.document = oldDoc;
				}
			}).then(function(responses){
				return {
					fragment: frag,
					data: data.__pageData,
					canWaitData: responses
				};
			}, function(errors) {
				throw errors;
			});
		},
		legacy: false,
		render: function(doc, state){
			var renderer = this.renderToFrag;
			var frag = renderer(state, {});

			var oldDoc = can.document;
			can.document = doc;
			can.appendChild(doc.body, frag, doc);
			can.document = oldDoc;
		},
		<%= ases %>
	};
	var __isNW = (function(){
		try{var nr = System._nodeRequire; return nr && nr('nw.gui') !== 'undefined';}catch(e){return false;}
	})();

	if(typeof steal !== 'undefined' && (__isNW || !(typeof process === 'object' && {}.toString.call(process) === '[object process]')))
		steal.done().then(function() { __export.start(); });

	return __export;
});
