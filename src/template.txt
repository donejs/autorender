define(<%= imports %>, function(<%= args %>){

	var tokens = <%= intermediate %>;

	var renderer = stache(tokens);

	var isNode = typeof process === "object" && {}.toString.call(process) === "[object process]";

	// SSR helpers isProduction, and some that don't matter in the client.
	stache.registerHelper("isProduction", function(options){
		var loader = typeof System !== "undefined" ? System : undefined;
		if(loader && loader.isEnv && loader.isEnv("production")) {
			return options.fn(this);
		} else {
			return options.inverse(this);
		}
	});

	function systemImportZone(){
		var oldImport;
		var myImport = function(){
			return Promise.resolve(oldImport.apply(this, arguments));
		};
		return {
			beforeTask: function(){
				oldImport = System.import;
				System.import = myImport;
			},
			afterTask: function(){
				System.import = oldImport;
			}
		};
	}

	var slice = Array.prototype.slice;
	function makeArray(parent) {
		return slice.call(childNodes(parent));
	}

	var autorender = {
		renderToFrag: function(scope, options){
			var moduleOptions = { module: module };
			options = (options && options.add) ? options.add(moduleOptions) :
				moduleOptions;
			return renderer(scope, options);
		},
		start: function(){
			var autorender = this;
			new Zone({
				plugins: [xhrZone, systemImportZone]
			}).run(function(){
				var state = autorender.state = new autorender.viewModel;

				var docEl = document.documentElement;
				domData.set.call(docEl, "viewModel", state);

				route.map(state);
				route.ready();

				autorender.rerender();
			});
		},
		rerender: function(){
			var keep = { "SCRIPT": true, "STYLE": true, "LINK": true };
			function eachChild(parent, callback){
				var nodes = makeArray(parent), node;
				var i = 0, len = nodes.length;

				for(; i < len; i++) {
					node = nodes[i];
					if(!keep[node.nodeName]) {
						if(callback(node) === false) {
							break;
						}
					}
				}
			}

			function remove(el) {
				mutate.removeChild.call(el.parentNode, el);
			}

			function appendTo(parent){
				return function(el){
					mutate.appendChild.call(parent, el);
				}
			}

			function traverse(node, tagName){
				var child;
				eachChild(node, function(el){
					if(el.tagName === tagName) {
						child = el;
						return false;
					} else {
						child = traverse(el, tagName);
						return !child;
					}
				});
				return child;
			}

			this.renderAsync().then(function(result){
				var frag = result.fragment;
				var head = document.head || document.getElementsByTagName("head")[0];
				var body = document.body;

				// Move elements from the fragment's head to the document head.
				eachChild(head, remove);

				var fragHead = traverse(frag, "HEAD");
				eachChild(fragHead, appendTo(head));

				// Move elements from the fragment's body to the document body.
				eachChild(body, remove);

				var fragBody = traverse(frag, "BODY");
				eachChild(fragBody, appendTo(body));
			});
		},
		renderAsync: function(renderer, data, options, doc){
			renderer = renderer || this.renderToFrag;
			data = data || this.state;
			options = options || {};

			var frag;

			var zone = new Zone({
				plugins: [xhrZone, systemImportZone]
			});

			return zone.run(function(){
				frag = renderer(data, options);

				if(doc) {
					var oldDoc = can.document;
					can.document = doc;
					mutate.appendChild.call(doc.body, frag, doc);
					can.document = oldDoc;
				}
			}).then(function(zoneData){
				return {
					fragment: frag,
					zoneData: zoneData
				};
			});
		},
		legacy: false,
		render: function(doc, state){
			var renderer = this.renderToFrag;
			var frag = renderer(state, {});

			var oldDoc = can.document;
			can.document = doc;
			mutate.appendChild.call(doc.body, frag, doc);
			can.document = oldDoc;
		},
		<%= ases %>
	};
	var isNW = (function(){
		try{var nr = System._nodeRequire; return nr && nr('nw.gui') !== 'undefined';}catch(e){return false;}
	})();

	if(typeof steal !== 'undefined' && (isNW || !isNode))
		steal.done().then(function() {
			if(steal.System.autorenderAutostart !== false) {
				autorender.start();
			}
		});

	return autorender;
});
