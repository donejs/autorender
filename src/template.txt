define(<%= imports %>, function(<%= args %>){

	var useZones = <%= useZones %>;
	var tokens = <%= intermediate %>;
	var renderer = stache(tokens);

	var isNode = typeof process === "object" &&
		{}.toString.call(process) === "[object process]";

	// SSR helpers isProduction, and some that don't matter in the client.
	stache.registerHelper("isProduction", function(options){
		console.warn("The isProduction helper is deprecated. Use a #switch helper on `env.NODE_ENV` instead.");
		var loader = typeof System !== "undefined" ? System : undefined;
		if(loader && loader.isEnv && loader.isEnv("production")) {
			return options.fn(this);
		} else {
			return options.inverse(this);
		}
	});

	function systemImportZone(){
		var oldImport;
		var myImport = function(){
			return Promise.resolve(oldImport.apply(this, arguments));
		};
		return {
			beforeTask: function(){
				oldImport = System.import;
				System.import = myImport;
			},
			afterTask: function(){
				System.import = oldImport;
			}
		};
	}

	/**
	 * @function render
	 * @hide
	 * @description Call the stache renderer function with Scope and Options.
	 * @signature `render(scope, options)`
	 * @param {can-view-scope} scope A can-view-scope object.
	 * @param {can-view-scope.Options} options An option object.
	 * @return {DocumentFragment} The result of calling a can-stache renderer,
	 * a document fragment.
	 */
	function render(scope, options){
		var moduleOptions = { module: module };
		options = (options && options.add) ? options.add(moduleOptions) :
			moduleOptions;
		return renderer(scope, options);
	}

	/**
	 * @function connectViewModelAndAttach
	 * @description Render the stache template, then update the
	 * DOM to reflect these changes. Save the state of the ViewModel instance
	 * so that it can be reused to do rerenders in case of live-reload. This is
	 * the main entry point of rendering, and happens upon page load.
	 * @signature `connectViewModelAndAttach()`
	 **/
	function connectViewModelAndAttach() {
		var ViewModel = autorender.viewModel;

		if(!ViewModel) {
			var message  = "done-autorender cannot start without a ViewModel. " +
				"Please ensure your template contains an export for your " +
				"application's ViewModel. https://github.com/donejs/autorender#viewmodel";
			console.error(message);
			return;
		}

		var viewModel = autorender.state = new ViewModel();
		domData.set.call(document.documentElement, "viewModel", viewModel);

		route.data = viewModel;
		route.ready();

		return renderAndAttach();
	}

	/**
	 * @function reattachWithZone
	 * @description Create a Zone for reattach.
	 * @signature `reattachWithZone()`
	 **/
	function reattachWithZone() {
		new Zone({
			plugins: [xhrZone, systemImportZone]
		}).run(function(){
			var result = connectViewModelAndAttach();

			if(typeof doneSsrAttach !== "undefined") {
				doneSsrAttach(result.fragment);
			}
		});
	}

	var tagsToIgnore = { "SCRIPT": true, "STYLE": true, "LINK": true };
	
	/**
	 * Call a callback for each child Node within a parent, skipping
	 * elements that should not be touched because of their side-effects.
	 */
	function eachChild(parent, callback){
		var nodes = Array.prototype.slice.call(childNodes(parent)),
			i = 0, len = nodes.length,
			node, ignoreTag;

		for(; i < len; i++) {
			node = nodes[i];
			ignoreTag = tagsToIgnore[node.nodeName];
			if(!ignoreTag) {
				// Returning false breaks the loop
				if(callback(node) === false) {
					break;
				}
			}
		}
	}

	/**
	 * Remove an element
	 */
	function remove(el) {
		mutate.removeChild.call(el.parentNode, el);
	}

	/**
	 * Creates a function that will append to a parent Element.
	 */
	function appendTo(parent){
		return function(el){
			mutate.appendChild.call(parent, el);
		}
	}

	/**
	 * @function attach
	 * @hide
	 * @description Receives the completely rendered DocumentFragment and
	 * attaches the parts from the head into the document.head, the body into
	 * document.body.
	 * @signature `attach(result)`
	 * @param {RenderResult} The result of rendering within a Zone.
	 */
	function attach(result){
		var frag = result.fragment;

		// If the fragment has no childNodes it was already attached.
		if(!frag.childNodes.firstChild) {
			return;
		}

		var head = document.head;
		var body = document.body;

		// Move elements from the fragment's head to the document head.
		eachChild(head, remove);

		var fragHead = frag.querySelector("head");
		eachChild(fragHead, appendTo(head));

		// Move elements from the fragment's body to the document body.
		eachChild(body, remove);

		var fragBody = frag.querySelector("body");
		eachChild(fragBody, appendTo(body));
	}


	/**
	 * @function renderAndAttach
	 * @hide
	 * @description Render the template with a Zone, wait for all asynchronous
	 * events to complete, and then attach the DocumentFragment to the page.
	 * @signature `renderAndAttach()`
	 * @return {Promise} A Promise that resolves after the template has been
	 * attached to the DOM.
	 */
	function renderAndAttach(){
		var viewModel = autorender.state;
		return useZones
			? renderInZone(viewModel).promise.then(attach)
			: renderNoZone(viewModel).then(attach);
	}

	/**
	 * @function renderIntoZone
	 * @hide
	 * @description Render a viewModel in a Zone context, returning the
	 * Zone promise.
	 * @signature `renderIntoZone(viewModel)`
	 * @param {Object} viewModel
	 * @return {RenderResult} the promise that resolves when asynchronousity
	 * within the Zone is complete, and the fragment generated.
	 */
	function renderInZone(viewModel){
		var fragment;
		var zonePromise = new Zone({
			plugins: [xhrZone, systemImportZone]
		})
		.run(function(){
			fragment = render(viewModel, {});
		}).then(function(zoneData){
			return {
				fragment: fragment,
				zoneData: zoneData
			};
		});

		return {
			promise: zonePromise,
			fragment: fragment
		};
	}

	/**
	 * @function renderNoZone
	 * @hide
	 * @description Render a viewModel without a Zone.
	 * @signature `renderIntoZone(viewModel)`
	 * @param {Object} viewModel
	 * @return {RenderResult} the promise that resolves immediately with a fragment.
	 */
	function renderNoZone(viewModel){
		var fragment = render(viewModel, {});
		return Promise.resolve({ fragment: fragment });
	}

	/**
	 * @function renderIntoDocument
	 * @description This is used by done-ssr, it provides a fresh document
	 * and viewModel, and this function calls the stache renderer and updates
	 * the document with the result.
	 * @signature `renderIntoDocument(document, viewModel)`
	 * @param {Document} document
	 * @param {Object} viewModel
	**/
	function renderIntoDocument(document, viewModel) {
		var frag = render(viewModel, {});

		var firstChild = frag.firstChild;
		var documentElement = document.documentElement;

		// If there is an <html> element, which there usually is,
		// replace the existing documentElement, otherwise just append the fragment
		if(firstChild && firstChild.nodeName === "HTML") {
			mutate.replaceChild.call(document, firstChild, documentElement);
		} else {
			mutate.appendChild.call(documentElement, frag);
		}
	}

	var autorender = {
		renderAndAttach: renderAndAttach,
		renderInZone: renderInZone,
		legacy: false,

		/*
		 * This was previously used by done-ssr, but no longer is.
		 * This should be removed as part of 2.0.0.
		 */
		render: function(doc, state){
			var frag = render(state, {});

			var oldDoc = can.document;
			can.document = doc;
			mutate.appendChild.call(doc.body, frag, doc);
			can.document = oldDoc;
		},
		renderIntoDocument: renderIntoDocument,
		<%= ases %>
	};

	var isNW = (function(){
		try{var nr = System._nodeRequire; return nr && nr('nw.gui') !== 'undefined';}catch(e){return false;}
	})();
	var isElectron = isNode && !!process.versions.electron;

	if(typeof steal !== 'undefined' && (isNW || isElectron || !isNode))
		steal.done().then(function() {
			if(steal.System.autorenderAutostart !== false) {
				if (useZones){
					reattachWithZone();
				} else {
					connectViewModelAndAttach();
				}
			}
		});

	return autorender;
});
